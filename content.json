{"pages":[{"title":"页面找不到辣！","text":"404 - page not found文章可能被作者删除了，点 主页 看一看作者其他的内容吧！ 或者你可以来 这里 留言（ ‘▿ ‘ ）","link":"/404.html"},{"title":"关于我","text":"ID 的解释 Nuke 是 Minecraft 游戏里的核弹，前面加个 China 显得比较牛 B，从初中玩游戏一直用到现在，没什么特别的含义，考虑换一个更牛 B 的，还没想好。 个人介绍 本科毕业于合肥工业大学，目前是中国科学院大学研 0 的学生，主要研究 IoT 安全。入门小 pwn 手，刚接触 CTF 没多久，小目标是按时毕业。 性格爱好 喜欢猫猫狗狗 ，喜欢吉他 喜欢折腾各种有意思的东西：博客、服务器、树莓派、路由器、v2ray…… 喜欢探索新鲜事物 对于知识，喜欢比较系统的学习，而不是这学一点那学一点 喜欢简洁，简洁但不简单的那种 对和数学联系比较密切的东西不太感兴趣（不太喜欢数学） 与我联系 电子邮件：chinanuke@nuke666.cn GitHub：ChinaNuke 也可以直接在下方留言板中留言","link":"/about/index.html"},{"title":"","text":"{\"images\":\"https://i.loli.net\"}","link":"/data/urls.json"}],"posts":[{"title":"使用 GitHub Actions 部署 Hexo 博客","text":"本文介绍如何使用 GitHub Actions 实现自动部署 Hexo 博客，具体方案为：使用两个仓库，一个私有仓库存放 Hexo 博客的源程序，一个公开仓库存放生成的静态网站。当我们向私有仓库 push 时，GitHub Actions 自动生成静态页面并推送到公开仓库，实现博客的自动化部署。 下文中都假设你已下载安装了 Hexo 所必需的组件并且已经在本地初始化了 Hexo 博客。 首先，你需要有一个私有仓库 hexo-src （名称随意）和一个公开仓库 &lt;username&gt;.github.io 。 检查 Hexo 博客根目录下的 package.json 文件，确保其中有以下内容，如没有则自行添加，新安装的应该默认是有的。 { ... “scripts”: { &quot;build&quot;: &quot;hexo generate&quot;, ... }, ...} 在私有仓库中添加 .github/workflow/pages.yml 文件，内容如下： name: Github Page # 名字随意 on: push: branches: - main # 私有仓库的默认分支名字 jobs: pages: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js 12.x uses: actions/setup-node@v1 with: node-version: '12.x' - name: Cache NPM dependencies uses: actions/cache@v2 with: path: node_modules key: ${{ runner.OS }}-npm-cache restore-keys: | ${{ runner.OS }}-npm-cache - name: Install Dependencies run: npm install - name: Build run: npm run build - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # 下面内容按需修改 external_repository: ChinaNuke/ChinaNuke.github.io # 目标仓库 (存放静态页面) publish_branch: main # 目标仓库的默认分支名字 publish_dir: ./public cname: nuke666.cn # 如果设置了自定义域名则需要设置此项 由于是部署目标是另一个仓库，因此需要设置 ${{ secrets.PERSONAL_TOKEN }} 并指定所要推送到的仓库 external_repository 以及其默认分支。 生成一个 personal token（scopes 选择 repo 即可），然后将其添加到私有仓库的 Secrets 里面（点击上方 Settings，然后点击 Secrets），名字为 PERSONAL_TOKEN，这样执行 Action 时就会自动去读取这个 token。 然后就完成了，直接把私有仓库 push 一下，Actions 会自动添加并执行，最多一分钟左右静态页面就会生成在公开仓库里。 当然也可以部署到同一个仓库里，只是缺点是你的仓库源文件也需要公开，万一不注意在配置文件里写了什么密码密钥的就不太好，部署到同一个仓库的方法见下方参考链接中的官方文档，大致步骤相似。 参考 https://hexo.io/docs/github-pages https://github.com/marketplace/actions/github-pages-action","link":"/2021/03/deploy-hexo-using-github-actions/"},{"title":"Hexo 部署到又拍云 CDN","text":"Github 在国内的访问速度实在难以接受，这样大家怎么能看到我在博客写的段子！ 于是乎，去了解了一下国内的 CDN 服务，发现又拍云可以白嫖，开始行动！ 在配置过程中遇到了一世纪难题：我的域名配置了阿里云的企业邮箱，于是我就不能把 nuke666.cn 使用 CNAME 方式解析到 CDN 服务器，会提示冲突。搜了半天似乎这个问题无解，只好委曲求全曲线救国，将 nuke666.cn 以 A 记录方式解析到 GitHub Page，使用 www.nuke666.cn 作为访问 CDN 的域名，这样访问我的博客就需要通过 www.nuke666.cn，使用nuke666.cn 的话访问到的是 GitHub Page 源站。如果没有遇到这一世纪难题的话，把这两者反过来自然是极好的。 配置的具体过程如下： GitHub Page 的配置 首先 ping chinanuke.github.io 获得网站的 IP 地址，为 nuke666.cn 添加 A 记录解析到此地址，然后在 GitHub 的 Settings 中添加自定义域名，并开启强制 HTTPS。GitHub 会自动为我们申请证书，需要等待一段时间才能生效。 又拍云的配置 在又拍云创建 CDN 服务 加速域名填写欲解析到 CDN 服务器的地址（www.nuke666.cn），由于 Hexo 是静态网站，所以应用场景选择 网页图片，其他填写内容入下图所示。 配置 CDN将 www.nuke666.cn 设置 CNAME 解析到又拍云提供的 CNAME 地址，回源 Host设置为源站的地址（nuke666.cn）。 申请和配置证书 在HTTPS 配置 中，为 www.nuke666.cn 申请免费的 Let’s Encrypt 证书，开启 HTTPS 访问和强制 HTTPS 访问。 至此，CDN 的配置已经全部完成。通过浏览器访问www.nuke666.cn，应该是可以正常访问的，那么怎么知道 CDN 有没有生效呢？ 通过浏览器的 开发者工具 ，查看Response Headers，有server: marco/2.11 即生效（又拍云的技术支持提供的方法），如果直连源站的话会显示server: GitHub.com 国内无法加载 Font Awesome 库的问题 虽然使用了 CDN，但是依然感觉很慢。询问又拍云技术支持得知，只有本域名下的内容才会被缓存到 CDN，而 Hexo 的主题如果使用 Font Awesome 等，是不会被加速的。通过开发者工具查看请求，发现向 fontawesome.com 的请求占用了大量的时间，而且最终还请求失败了？ 在 icarus 主题的配置文件中提供了对修改 CDN 的支持，修改如下，发现速度有明显提升。 themes/icarus/_config.ymlproviders: # Name or URL template of the JavaScript and/or stylesheet CDN provider cdn: jsdelivr # Name or URL template of the webfont CDN provider fontcdn: loli # Name or URL of the fontawesome icon font CDN provider iconcdn: loli 又拍云打钱！","link":"/2020/07/deploy-to-upyuncdn/"},{"title":"Hexo 博客安装、备份、恢复和升级","text":"Hexo 是目前很流行的一个博客框架，目前搜索引擎中搜索到的自建博客十有七八都是使用的 Hexo，本博客用的也正是 Hexo。由于 Hexo 官方文档中安装部分搞得人晕头转向，所以本文整理记录一下 Hexo 博客安装、部署、备份 / 恢复以及升级的主要步骤和注意事项，力求简单清爽，供参考。 初装 安装 nodejs 和 npm $ pacman -S npm 也可以直接在 Pamac 包管理器中搜索 npm 安装。nodejs 作为 npm 的依赖会自动安装。pacman 是 Manjaro Linux 和 Arch Linux 的包管理软件，其他发行版命令不同但方法类似。 创建博客源程序目录，并安装 Hexo 到此目录 $ mkdir hexo-src &amp;&amp; cd hexo-src$ npm install hexo 此命令将 hexo 安装到 hexo-src 目录的 node_modules 中。 修改 PATH（可选） 将以下内容写入 ~/.bashrc 最后一行（如果用的是 zsh 就写到 ~/.zshrc），然后执行 source ~/.bashrc 命令。 export &quot;PATH=$PATH:$HOME/hexo-src/node_modules/.bin&quot; 这一步是为了能在命令行中直接使用 hexo 命令。也可以不进行这一步，只是以后需要用 npx hexo 命令代替。此处假定 hexo 目录在用户 home 目录中，如不同请修改命令。 进行博客初始化 $ hexo init # 或者 npx hexo init$ npm install 完成 部署 / 备份 推荐 使用 GitHub Actions 部署和备份博客。 恢复 安装 nodejs 和 npm 克隆源程序仓库 $ git clone git@github.com:&lt;username&gt;/hexo-src.git 安装 hexo 和依赖模块 $ cd hexo-src$ npm install 此命令会读取目录中的 package.json 并自动安装 hexo 及所需的模块到 node_modules 目录中。 修改 PATH（可选） 完成 升级$ npm update 执行完注意一下输出信息，可能有包存在冲突没有给自动升级，需要自行解决冲突或者强制升级。 参考 https://github.com/hexojs/hexo/issues/2508","link":"/2021/03/hexo-install-backup-recover-update/"},{"title":"Git 基本操作","text":"Git 是目前世界上最先进的分布式版本控制系统（廖雪峰说的），2008 年，GitHub 网站上线，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub。与集中式的版本控制 SVN 不同，分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库。 本文记录 Git 的各种常用的基本操作，方便使用时查阅。如果你是头一次接触 Git，建议先找一份教程完整的看一看，推荐 廖雪峰的 Git 教程，虽然有些内容讲的也比较绕，但是入门来说应该足够了。 初始设置 配置用户名和 Emailgit config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot; 在本地 Git 配置后，还需要在 GitHub 账号的 Settings - Emails 中添加并验证这个邮箱，才能与自己的 GitHub 账号关联。 设置和取消代理 设置合适的科研网络环境可以有效解决克隆仓库时速度慢的问题。 # httpgit config --global https.proxy http://127.0.0.1:8080git config --global http.proxy https://127.0.0.1:8080# socks5git config --global https.proxy socks5://127.0.0.1:1080git config --global http.proxy socks5://127.0.0.1:1080git config --global unset http.proxygit config --global unset https.proxy 基本操作 在本地创建版本库(repository)git init &lt;directory&gt;# 或者：cd &lt;directory&gt;git init 这样， &lt;directory&gt; 目录就变成了 Git 可管理的仓库，可以发现目录下多了一个隐藏的 .git 目录，不要手动改动这个目录里的东西。 查看仓库状态 如果第一次接触 Git，建议先搞清楚工作区（Working Directory）、版本库（Repository）和暂存区（Stage）的概念，可参考 廖雪峰的教程。 git status 使用这个命令可以看到： 工作区中已被修改但是未被添加到暂存区的文件（Changes not staged for commit） 已添加到工作区但是未提交的文件（Changes to be committed） 尚未被 Git 追踪的文件（Untracked files） 暂存区相关操作git add xxx.txt # 将工作区中修改的文件（Changes not staged for commit）添加到暂存区git rm --cached xxx.txt # 将暂存区的文件撤回到工作区git restore xxx.txt # 丢弃工作区中对文件的修改，使用暂存区中的版本 要注意区分第二个和第三个命令，它们的作用是不一样的。如果记不清这几个命令，输入 git status 会得到提示，提示中对命令的解释也很明确。 本地版本库操作git commit -m &quot;blablabla...&quot; # 将暂存区中的文件提交到版本库。需提供版本说明信息 # 执行这个命令前需要先把要提交的东西使用 git add 命令添加到暂存区 # 然后可以使用 git status 确认一下要提交的内容 git log [--oneline] # 查看版本库的所有 commit 记录。添加 --oneline 参数可以在一行显式git reflog # 查看命令历史，可以看到所有之前使用过的命令记录 默认的 log 命令显示的内容比较长，每次写都带参数的话又比较麻烦，我们可以使用 Git 的别名功能。将下面的这条命令输入到命令行中： git config --global alias.lg &quot;log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit&quot; 之后我们就可以用 git lg 来替代 git log ，可以看到，这样不仅显示的内容更加清晰，还能够显示出 commit 树的分支情况。 远程仓库操作git clone git@github.com:ChinaNuke/learnGit.git # 克隆远程仓库git remote add origin git@github.com:ChinaNuke/learnGit.git # 添加远程仓库 这两条命令的主要区别是，克隆一般用于 GitHub 上已经有了在开发的项目，我们需要把整个项目仓库下载到本地的情况（先有远程库，后有本地库）；而添加用于刚创建 GitHub 仓库，里面并没有东西的情况（先有本地库，后有远程库），但也可以用于第一种情况。 git push -u origin master # 把本地库的所有内容推送到远程库上，并为 master 分支建立链接 # origin 是远程库的名字，可以改成其他的，但一般用 origin 比较直观 # 一般来说，仅第一次推送时需要建立链接，后续推送不需要git push # 把当前分支的内容推送到远程库对应的分支git pull # 从远程库拉取分支的内容git reset --hard HEAD^ # 回退到上一个版本。HEAD^^ 为上上个版本，以此类推git reset --hard 1094a # 回退 / 还原到提交编号开头为 1094a 的版本 分支管理 留坑。 多人协作项目一般流程 使用 Git 和 GitHub 可以很方便地进行多人协作。多人协作中所用到的大部分命令已在前面提到，此处不对命令进行详细解释。 对于已经在 GitHub 上建好的项目，我们要先把它克隆到本地。 git clone git@github.com:ChinaNuke/learnGit.git [local directory] 其中，参数中的链接是远程仓库的地址，可以在 GitHub 项目页面找到。 [local directory] 为可选参数，如果指定了目录名，则克隆到这个目录，未指定则默认以仓库名来命名目录，此处为 learnGit 。 之后我们需要 cd learnGit 进入到仓库目录中，后续的操作都在仓库中进行。我们可以使用 git remote -v 命令查看当前仓库本地链接到的远程仓库，一般会看到 fetch 和 push 两个地址，如果没有推送权限，就看不到 push 地址。 然后我们就可以在本地进行开发了，开发过程中我们可以随时使用 git add 命令将工作区中修改过的文件添加到暂存区，然后使用 git commit 命令进行提交，使用 git lg 命令可以查看 commit 树。 在多人开发中，很有可能遇到这样一种情况：我在本地进行开发，其他人也在他的本地基于同一个版本进行开发，然后他在我们之前将修改提交到了远程仓库，这时候我们 push 时就会被拒绝。 To github.com:github.com:ChinaNuke/learnGit.git ! [rejected] dev -&gt; dev (non-fast-forward)error: failed to push some refs to 'git@github.com:ChinaNuke/learnGit.git'hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: 'git pull ...') before pushing again.hint: See the 'Note about fast-forwards' in 'git push --help' for details. 原因显而易见，那如何解决呢？我们先用 git pull 命令把最新的提交从远程库拉取下来，在本地合并，这时可能会有冲突，需要我们手动进行合并（冲突合并方法见廖雪峰教程）。合并完冲突之后就可以再次进行推送了，但是在这之前我们先使用 git lg 命令看看现在的 commit 树，它是不直的，类似这个样子： * d1be385 (HEAD -&gt; master, origin/master) init hello* e5e69f1 Merge branch 'dev'|\\ | * 57c53ab (origin/dev, dev) fix env conflict| |\\ | | * 7a5e5dd add env| * | 7bd91f1 add new env| |/ * | 12a631b merged bug fix 101|\\ \\ | * | 4c805e2 fix bug 101|/ / * | e1e9c68 merge with no-ff|\\ \\ | |/ | * f52c633 add merge|/ * cf810e4 conflict fixed 这样很不好看，对强迫症很不友好。我们可以在推送前再加一步 git rebase ，正常情况下 Git 会自动将 commit 树整理成直的，执行完之后我们可以再次使用 git lg 看一下。最后，我们就可以用 git push 推送提交了。 关于 commit 树要整理成直的还是保留原始的修改记录，网上众说纷纭，我更倾向于整理成直的，清晰又直观！ 建议参考资料 Git Cheat Sheet: https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet 廖雪峰 Git 教程: https://www.liaoxuefeng.com/wiki/896043488029600","link":"/2020/09/how-to-use-git/"},{"title":"Markdown 基本语法","text":"Markdown 是一种轻量级的标记语言，对图片、图标和数学公式都有很好的支持，而且其语法极为简单，可以让我们更好的专注于写作内容。本文记录 Markdown 的各类基本语法和显示效果，以方便后续写作时查阅。 标题# 一级标题## 二级标题### 三级标题 效果： 一级标题 二级标题 三级标题 段落和换行 用一行的空行来隔开段落，Markdown Guide 不建议使用空格或者 TAB 对段落缩进。 这是第一段 这是第二段 效果：这是第一段 这是第二段 在行末添加两个及以上的空格或者加入 &lt;br&gt; 标签 可以单纯的进行换行 效果和上面一样。 这是第一行 &lt;br&gt; 这是第二行 效果：这是第一行 这是第二行 加粗和斜体** 加粗字体 *** 斜体字体 **** 加粗和斜体*** 效果：加粗字体 斜体字体 加粗和斜体 引用&gt; 这里是引用 效果： 这里是引用 &gt; 这里是多段引用&gt;&gt; 这是引用的第二段 效果： 这里是多段引用 这是引用的第二段 &gt; 这里是套娃引用&gt;&gt;&gt; 这是娃 效果： 这里是套娃引用 这是娃 引用中也可以再嵌套其他的格式。 有序和无序列表1. 有序列表第一项2. 有序列表第二项3. 有序列表第三项4. 不必保持标号顺序但是第一项必须为 1 效果： 有序列表第一项 有序列表第二项 有序列表第三项 不必保持标号顺序但是第一项必须为 1 - 无序列表第一项- 无序列表第二项- 无序列表第三项 效果： 无序列表第一项 无序列表第二项 无序列表第三项 在列表中添加元素同时保持列表连续，可以在插入的元素前面添加 四个空格 或者一个 TAB 缩进。 - 无序列表第一项- 无序列表第二项 列表之间插入文本，保持列表连续- 无序列表第三项 效果： 无序列表第一项 无序列表第二项 列表之间插入文本，保持列表连续 无序列表第三项 图片 ![ 图片替换文本 ]( 图片地址) 链接[小米 10 点击就送（假的）](https://nuke666.cn) 效果：小米 10 点击就送（假的） 代码块​``` python hello/hello.pydef my_print(): print('Hello World!')``` 效果：​``` python hello/hello.pydef my_print(): print(‘Hello World!’) ``` 以上便是 Markdown 常用的基本语法，其他不常用的语法并没有列出，以后有时间再开一篇记录扩展语法。 参考：Markdown Guide: Basic Syntax","link":"/2020/07/markdown-syntax/"},{"title":"Linux 多网络自动路由设置","text":"本文介绍如何通过设置本机上的路由规则，实现在同时连接多个网络时，根据目标地址所属网段来自动选择走哪一个网络。其中有线网卡连接内网（校园网 / 企业内网），无线网卡连接外网（手机热点），效果为：同时连接两个网络时，访问内网地址（指定网段）会走有线网络，访问其他网络地址会走无线网络；而单独连接其中一个网络时，也能够正常使用。 我所使用的操作系统是 Manjaro Linux，Gnome 桌面，对于其他操作系统和桌面环境未进行测试，请自行寻找是否有相似的设置。 首先设置无线网络，假设网关为 192.168.43.1 ，打开 设置 -&gt; 网络 ，点击有线网络的设置图标，切换到 IPv4 选项卡，在最下方“路由”设置中，关闭“自动”按钮，并填入以下内容。默认设置下，有线网络的优先级要高于无线网络，而我们需要无线网络优先于有线网络，因此通过调整跃点（Metric）的值为 99 来提高其优先级（有线网络的默认跃点值为 100，值越小优先级越高），点击“应用”并重新连接网络。 地址 子网掩码 网关 跃点 0.0.0.0 0.0.0.0 192.168.43.1 99 进行以上设置之后，当我们连接到这个网络时，会自动生成下面这样一条默认路由规则。它表示，在没有其他特定规则和优先级更高的默认规则与目标地址匹配时，则使用这条规则，即通过 wlp69s0 网卡访问 192.168.43.1 网关。 default via 192.168.43.1 dev wlp60s0 proto static metric 99 接着设置有线网络，假设网关为 192.168.2.1，我们需要让 172.16.0.0/12 网段的地址走这个网络。打开 设置 -&gt; WiFi，点击网络旁的设置按钮，同样切换到 IPv4 选项卡，关闭路由设置的“自动”按钮并填入以下内容，点击“应用”并重新连接网络。这里不设置跃点的值，使其保持默认值 100. 地址 子网掩码 网关 跃点 172.16.0.0 255.240.0.0 192.168.2.1 0.0.0.0 0.0.0.0 192.168.2.1 进行以上设置后，当我们再连接这个网络时，会自动生成下面这样两条路由规则。其中，第二条为特定规则，要优先于所有 default 规则。 default via 192.168.2.1 dev enp59s0 proto static metric 100 172.0.0.0/8 via 192.168.2.1 dev enp59s0 proto static metric 100 同时连接两个网络时，系统中所有的路由规则如下。对于 172 网段的地址，由于第三条特定静态规则的存在，它会通过 enp59s0 这个有线网卡来走 192.168.2.1 网关，也就是走内网，而对于其他没有定义特定规则的地址，有两条默认规则可以选择，但是第一条规则的优先级要高于第二条，所以对于其他的流量，都走无线网络。 $ ip route showdefault via 192.168.43.1 dev wlp60s0 proto static metric 99 default via 192.168.2.1 dev enp59s0 proto static metric 100 172.0.0.0/8 via 192.168.2.1 dev enp59s0 proto static metric 100 192.168.2.0/24 dev enp59s0 proto kernel scope link src 192.168.2.102 metric 100 192.168.43.0/24 dev wlp60s0 proto kernel scope link src 192.168.43.42 metric 600 而只连接有线网络时，系统中的路由规则如下。 $ ip route showdefault via 192.168.2.1 dev enp59s0 proto static metric 100 172.0.0.0/8 via 192.168.2.1 dev enp59s0 proto static metric 100 192.168.2.0/24 dev enp59s0 proto kernel scope link src 192.168.2.102 metric 100 只连接无线网络时，系统中的路由规则如下。 $ ip route showdefault via 192.168.43.1 dev wlp60s0 proto static metric 99 192.168.43.0/24 dev wlp60s0 proto kernel scope link src 192.168.43.42 metric 600 以上的路由规则也可以通过类似下面的命令来手动添加，但是这样添加的路由规则重启后便失效，而且不能随网络连接情况自动调整，因此并不推荐。 $ ip route add 172.0.0.0/8 via 192.168.2.1 dev enp59s0 参考和工具： linux 同时连接内外网的设置 - CSDN 东北大学 IP 地址聚合程序","link":"/2021/06/multi-network-routing/"},{"title":"面向小白的 Windows 系统重装教程","text":"这是一篇面向小白用户的 Windows 系统重装教程，由易到难地介绍了重装 Windows 系统的四种方法，包括直接使用系统提供的重置功能、直接运行镜像内的安装程序、把镜像文件写入 U 盘安装以及使用 PE 系统进行安装，内容尽可能简洁明了，可能有部分描述不太专业，欢迎在评论区指正！ 前言：本来觉得没有必要写一篇这样的东西，网上教程一大把一大把的，可是经常会有人问我怎么重装系统，看了看吧一些教程贴讲的也不是很清楚，没找到一篇合适的可以直接甩给别人的，干脆就自己写一篇，再有人问我就把这文章甩给他。 文章较长且图片较多，阅读时可以点击页面左侧目录进行跳转。 概念解释 首先对本文中出现的几个概念进行简要的解释，便于理解后续内容。 操作系统 维基百科 上对操作系统的定义是：“一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序”。我们所使用的 Windows 就是一种操作系统，除此之外比较流行的还有开源的 Linux 系统（一般我们使用基于 Linux 内核的发行版，如 Debian、Ubuntu、CentOS 等）、苹果的 macOS 系统等。 硬盘（磁盘）硬盘就是就是我们电脑上用来存储数据的一个硬件设备，操作系统和我们的数据文件都是存储在硬盘上的。 分区（驱动器）硬盘分区是指将硬盘的整体存储空间划分成多个独立的区域，分别用于操作系统、应用程序及数据文件等（百度百科）。Windows 系统上的分区就是我们通常说的 C 盘、D 盘、E 盘这些，比如有人习惯把操作系统安装在 C 盘，应用程序安装在 D 盘，把自己的数据文件存储在 E 盘，这样如果系统崩溃了，不会影响到我们的数据文件。 系统镜像 本文中的系统镜像指下载的用于安装 Windows 操作系统的文件，通常以 .iso 为后缀名。 PE 系统Windows 预安装环境（Windows Preinstallation Environment），可以理解为一个最小 Windows 系统，它可以被放在 U 盘上，用来安装正式的操作系统，或者进行一些维护操作。常见的 PE 系统有：微 PE、老毛桃、大白菜、优启通等，有些不太良心的 PE 系统会在你安装系统过程中夹带私货，个人更推荐微 PE。 BIOS基本输入输出系统（Basic Input Output System）本质上是一个程序，主要负责开机时自检以及引导操作系统启动，在装系统过程中我们主要使用 BIOS 提供的启动菜单来实现从 U 盘启动。 UEFI 和 Legency BIOS 以及 GPT 分区表和 MBR 分区表 说来话长长话短说，UEFI 的出现是为了取代传统 BIOS，更好，近几年的电脑几乎都使用 UEFI 而不是传统 BIOS。GPT 与 UEFI 对应，MBR 与 Legency BIOS 对应，GPT 更好。所以现在装系统都是 UEFI+GPT 的组合，如果你发现新买的电脑是 BIOS+MBR 的组合，十有八九是无良电脑店水平不行他不懂给你瞎装…… 重装系统前的准备工作 备份重要文件 在进行后面的操作之前一定要备份好电脑里重要的数据！！ 怎么备份？把重要的文件拷到 U 盘里或者移动硬盘里是最简单的方法。 获取系统镜像MSDN, I Tell You 是一个广受好评的网站，找到想要下载的操作系统，选择合适的版本，复制下载链接进行下载即可，ed2k 和 bt 格式的下载链接可以使用迅雷或者百度云离线下载等工具进行下载，Windows 镜像下载后会得到一个后缀为.iso 的镜像文件。对大多数人来说，版本选择 Consumer Editions 即可。。 方法一：通过系统提供的重置功能 如果你只是想清空一下当前的系统，恢复到刚装完系统的干净状态，并不打算更改系统版本，那么最简单的方法是直接在系统设置中进行重置，不需要什么额外的知识，也不需要 U 盘，不需要下载任何东西，简单粗暴。打开“设置” -&gt; “更新和安全” -&gt; “恢复”，可以看到系统提供了“重置此电脑”的操作。 点击“开始”，然后选择“删除所有内容”，之后程序会显示出默认要执行的操作，“删除应用和文件。不清理驱动器”即不对分区进行覆写，“仅删除 Windows 驱动器中的所有文件”即仅删除系统盘（C 盘）的内容，C、D、E 这些其他盘里的东西原封不动。如果要对这个设置进行修改，点击“更改设置”，选择是否要覆写磁盘防止有心之人恢复你已经删除的数据（一般没必要，这个操作很慢），以及是否要删除所有的驱动器而不只是删除 C 盘。确认无误后，就可以点击“重置”然后等待系统重置完成。 方法二：直接运行镜像内的安装程序 如果你的系统现在能够正常使用，那么可以直接在当前系统中双击下载的镜像文件运行安装程序（可以把它当做一个安装包），系统会自动使用虚拟光驱装载镜像文件，并弹出一个 DVD 驱动器的窗口。双击“setup.exe”程序，选择允许更改，即可看到“Windows 10 安装程序”窗口。在这里可以“更改 Windows 安装程序下载更新的方式”，选择是在安装系统时下载更新、驱动程序和可选功能还是在安装完系统后再进行这些操作。 准备就绪后，安装程序会显示即将执行的默认操作，即“安装 Windows 10 家庭版”和“保留个人文件和应用”，我们可以点击“更改要保留的内容”，选择“无”以清空整个分区。最后点击安装，等待安装完成。 方法三：将系统镜像写入 U 盘进行安装 方法二并不总是能成功，而且如果你的系统出现问题，已经无法正常使用，那么你可以在另一台电脑上将下载好的镜像写入一个空的 U 盘，把这个 U 盘作为系统安装盘来重新安装 Windows 系统。 下载并运行Rufus 工具，Rufus 是一个可以格式化和创建可引导 USB 闪存盘的工具，使用它可以将我们下载的系统镜像写入到 U 盘中。设备选择我们插入的 U 盘，点击右侧选择按钮选择我们下载好的系统镜像，其他设置保持默认，点击“开始”进行写入。需要注意的是，写入过程会擦除原先 U 盘上所有的数据，所以一定要用一个没有重要数据的 U 盘。 写入完成后，将 U 盘插入自己的电脑并开机（如果是在自己电脑上进行的写入操作则重启电脑），并不断地点按电脑的启动菜单键（部分品牌笔记本电脑按键如下，有的电脑可能还要同时按下 Fn 键），直到出现一个类似下图的启动菜单。如果没有出现启动菜单而是直接进入了自己的系统，那么关机重来。很多电脑在 Logo 界面时如果你随便按一个键，它会提示你按哪个键进入启动菜单，按哪个键进入 BIOS，可以仔细观察一下。在启动菜单中选择自己的 U 盘（一般会以 EFI 开头且含有 U 盘厂商的名字，比如 SanDisk），按下回车键即可从 U 盘启动。 品牌 启动按键 品牌 启动按键 联想 F12 华硕 ESC 苹果 长按 Option 神舟 F12 戴尔 F12 宏碁 F12 惠普 F9 三星 F12 接着你将会看到 Windows 安装程序，在“激活 Windows”窗口，点击“我没有产品密钥”，跳过密钥的填写，接着选择要安装的 Windows 版本。 安装类型选择“自定义”，然后进入到安装分区选择界面，选择你要把系统安装在哪个盘，我们可以通过容量大小来辨别哪个是我们的 C 盘，把系统安装在这里。也可以在这个界面对分区进行调整，增加或者删除分区，但只建议动主分区，不要修改前面的“系统分区”和“MSR”分区。如果想清空某个分区的内容，可以选中分区然后点击下面的“格式化”按钮。 点击“下一步”会提示安装过程可能把以前系统盘内的文件备份到“Windows.old”文件夹，如果不需要这些文件我们要记得装完系统后把文件夹删除，这个文件夹还是挺大的。之后等待安装完成即可。 方法四：使用 PE 系统进行系统安装 我最喜欢的方式还是使用 PE 来装系统，因为 PE 系统里带了一些很有用的工具，比如 DiskGenius，使得我们可以在重装前通过 PE 系统对硬盘进行重新分区，也可以直接在 PE 系统里对原操作系统的重要文件进行备份，根本不需要考虑原操作系统是否可用，这是给别人装系统最舒服的方式，而且从我的经历来看这种方法要比方法二和三更可靠一些。 下载并运行 微 PE 工具箱 最新版本，点击“查看下载链接”按钮会提示捐赠，但并不是强制的，没有使用过可以先跳过捐赠，用后觉得不错再回来捐赠也行，注意下载 64 位版本。不要点软件界面正中间那个大大的“立即安装进系统”按钮！我们要安装到 U 盘。点击右下角“安装 PE 到 U 盘图标”，“安装方法”为默认的三分区方式，其他设置也保持默认即可，可以勾选“个性化盘符图标‘，也可以自定义 PE 系统的壁纸。 成功把微 PE 安装到 U 盘之后，我们要让电脑从 U 盘启动，具体操作和方法三中描述一样。 之后，我们就成功进入了 PE 系统，这个系统的样子跟我们平时所使用的系统看起来很像。点击桌面上的“此电脑”图标，可以看到自己硬盘上的分区，这里显示的盘符（C、D、E）可能和以前在系统中看到的不一样，这不重要，只是个代号而已。如果无法进入系统，那么可以在这里对我们的数据进行备份，把需要备份的东西复制到 U 盘的数据区即可。注意一下其中容量为 299M 的 Z 盘，后面要用到。 DiskGenius 是一个非常好用的分区管理工具，我们可以用它对电脑上的分区重新进行规划，付费版本还提供了“数据恢复”功能，不过微 PE 自带的是免费版本没有这个功能。这里演示一个可选的操作，对重装系统来说不是必须的。比如说我觉得现在的分区太乱了我想重新建分区重新做人，不想要以前所有的分区和数据了，那么我们可以在左侧硬盘上点击鼠标右键，点击“删除所有分区”，执行完成后这个硬盘上所有的分区都被删除了，点击左上角“保存更改”按钮使操作生效（注意啊看准了硬盘别选错了！之前就有个小伙子在 PE 系统里把我放 PE 系统的 U 盘分区给删了……）。然后点击上面“快速分区”按钮，分区表类型选择“GUID”（有的版本显示为 GPT），选择合适的分区数量，“创建新 ESP 分区”和“创建 MSR 分区”要保留勾选，在右侧调整每个分区的大小和卷标，比如说我想要“系统”、“软件”、“数据”三个分区，之后点击“确定”执行操作。注意：这个操作会删除所有分区上的数据 重新分区完成后，可以看到系统的分区变成了一个 ESP 分区、一个 MSR 分区，一个 C 盘（系统盘）、一个 D 盘（软件盘）、一个 E 盘（数据盘）。其中，注意 ESP 分区的大小，300M，实际上就是前面看到的 Z 盘。 接着我们开始往硬盘上安装操作系统。运行桌面上的“Windows 安装器”，程序界面如下。有三个“位置”需要进行确认和修改，第一个“Windows 安装文件的位置”，就是安装镜像的位置，点击右侧“搜索”按钮选择之前放在 U 盘数据区的 Windows 镜像即可；第二个“引导驱动器的位置”就是前面那个 300M 大小的 ESP 分区，正常情况下程序会自动帮我们选择，需要确认一下自动选择的是否正确；第三个“安装驱动器的位置”，就是要把系统安装在哪里，这里选择我们划分的 C 盘（系统盘）。如果要安装其他的 Windows 版本，可以在下面下拉列表进行选择。其他选项保持默认不需要更改，点击“安装”按钮执行安装，完成后会提示重启。 方法对比 方法 难度 需要准备 局限性 推荐指数 1 ★☆☆ 无 不能安装其他版本的系统 ★★★ 2 ★☆☆ 下载系统镜像 似乎不能全盘擦除，而且我在虚拟机上安装失败了… ☆☆☆ 3 ★★☆ 下载系统镜像、下载写盘工具、准备 U 盘 一个 U 盘只能写一个系统镜像，而且不能再用来存别的东西 ★☆☆ 4 ★★☆ 下载系统镜像、下载 WePE、准备 U 盘 / ★★★ 常见问题解答 我安装的系统是正版系统吗？我要如何激活我的系统？正版不正版的界定应该主要是你给没给微软钱……近几年购买的笔记本电脑一般都预装了正版的 Windows10 家庭版，如果你重装时选择的是家庭版系统，那么联网后会自动激活，这种情况算是电脑厂商给你花了钱的。如果你是比较早的电脑没有原装的正版系统，或者你就是想体验专业版或者企业版，可以自行搜索激活工具进行激活，比较主流的有数字权利激活和 KMS 激活两种方案。 家庭版、企业版、专业版，我该选哪一种？Consumer editions 包含 Home（家庭版）、Education（教育版）、Professional（专业版） Business editions 包含 Education（教育版）、Enterprise（企业版）、Professional（专业版） 如果你不知道选啥版本那就选家庭版，说明更高级版本里的功能你也用不上。","link":"/2021/08/How-to-reinstall-Windows/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"使用技巧","slug":"使用技巧","link":"/tags/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"name":"网络设置","slug":"网络设置","link":"/tags/%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"}],"categories":[{"name":"网站","slug":"网站","link":"/categories/%E7%BD%91%E7%AB%99/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"}]}