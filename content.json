{"pages":[{"title":"关于我","text":"一名计算机与信息系的本科生，就读于合肥工业大学，走在成为码农的路上。 喜欢猫，也喜欢狗，但目前没条件养。 喜欢音乐，在学习吉他，但由于学习原因，最近没有太多时间练习。 先占着坑，剩下的内容改天写","link":"/about/index.html"}],"posts":[{"title":"Hexo 部署到又拍云CDN","text":"Github在国内的访问速度实在难以接受，这样大家怎么能看到我在博客写的段子！ 于是乎，去了解了一下国内的CDN服务，发现又拍云可以白嫖，开始行动！ 在配置过程中遇到了一世纪难题：我的域名配置了阿里云的企业邮箱，于是我就不能把nuke666.cn使用CNAME方式解析到CDN服务器，会提示冲突。搜了半天似乎这个问题无解，只好委曲求全曲线救国，将nuke666.cn以A记录方式解析到GitHub Page，使用www.nuke666.cn作为访问CDN的域名，这样访问我的博客就需要通过www.nuke666.cn，使用nuke666.cn的话访问到的是GitHub Page源站。如果没有遇到这一世纪难题的话，把这两者反过来自然是极好的。 配置的具体过程如下： GitHub Page的配置首先ping chinanuke.github.io获得网站的IP地址，为nuke666.cn添加A记录解析到此地址，然后在GitHub的Settings中添加自定义域名，并开启强制HTTPS。GitHub会自动为我们申请证书，需要等待一段时间才能生效。 又拍云的配置在又拍云创建CDN服务加速域名填写欲解析到CDN服务器的地址（www.nuke666.cn），由于Hexo是静态网站，所以应用场景选择网页图片，其他填写内容入下图所示。 配置CDN将www.nuke666.cn设置CNAME解析到又拍云提供的CNAME地址，回源 Host设置为源站的地址（nuke666.cn）。 申请和配置证书在HTTPS配置中，为www.nuke666.cn申请免费的 Let’s Encrypt 证书，开启HTTPS访问和强制HTTPS访问。 至此，CDN的配置已经全部完成。通过浏览器访问www.nuke666.cn，应该是可以正常访问的，那么怎么知道CDN有没有生效呢？ 通过浏览器的开发者工具，查看Response Headers，有server: marco/2.11即生效（又拍云的技术支持提供的方法），如果直连源站的话会显示server: GitHub.com 国内无法加载Font Awesome库的问题虽然使用了CDN，但是依然感觉很慢。询问又拍云技术支持得知，只有本域名下的内容才会被缓存到CDN，而Hexo的主题如果使用Font Awesome等，是不会被加速的。通过开发者工具查看请求，发现向fontawesome.com的请求占用了大量的时间，而且最终还请求失败了？ 在icarus主题的配置文件中提供了对修改CDN的支持，修改如下，发现速度有明显提升。 themes/icarus/_config.yml12345678providers: # Name or URL template of the JavaScript and/or stylesheet CDN provider cdn: jsdelivr # Name or URL template of the webfont CDN provider fontcdn: loli # Name or URL of the fontawesome icon font CDN provider iconcdn: loli 又拍云打钱！","link":"/2020/07/deploy-to-upyuncdn/"},{"title":"Git 基本操作","text":"Git是目前世界上最先进的分布式版本控制系统（廖雪峰说的），2008年，GitHub网站上线，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub。与集中式的版本控制SVN不同，分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库。 本文记录Git的各种常用的基本操作，方便使用时查阅。如果你是头一次接触Git，建议先找一份教程完整的看一看，推荐廖雪峰的Git教程，虽然有些内容讲的也比较绕，但是入门来说应该足够了。 初始设置配置用户名和Email12git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot; 在本地Git配置后，还需要在GitHub账号的 Settings - Emails 中添加并验证这个邮箱，才能与自己的GitHub账号关联。 设置和取消代理设置合适的科研网络环境可以有效解决克隆仓库时速度慢的问题。 12345678910# httpgit config --global https.proxy http://127.0.0.1:8080git config --global http.proxy https://127.0.0.1:8080# socks5git config --global https.proxy socks5://127.0.0.1:1080git config --global http.proxy socks5://127.0.0.1:1080git config --global unset http.proxygit config --global unset https.proxy 基本操作在本地创建版本库(repository)1234git init &lt;directory&gt;# 或者：cd &lt;directory&gt;git init 这样， &lt;directory&gt; 目录就变成了Git可管理的仓库，可以发现目录下多了一个隐藏的 .git 目录，不要手动改动这个目录里的东西。 查看仓库状态如果第一次接触Git，建议先搞清楚工作区（Working Directory）、版本库（Repository）和暂存区（Stage）的概念，可参考廖雪峰的教程。 1git status 使用这个命令可以看到： 工作区中已被修改但是未被添加到暂存区的文件（Changes not staged for commit） 已添加到工作区但是未提交的文件（Changes to be committed） 尚未被Git追踪的文件（Untracked files） 暂存区相关操作123git add xxx.txt # 将工作区中修改的文件（Changes not staged for commit）添加到暂存区git rm --cached xxx.txt # 将暂存区的文件撤回到工作区git restore xxx.txt # 丢弃工作区中对文件的修改，使用暂存区中的版本 要注意区分第二个和第三个命令，它们的作用是不一样的。如果记不清这几个命令，输入 git status 会得到提示，提示中对命令的解释也很明确。 本地版本库操作1234567git commit -m &quot;blablabla...&quot; # 将暂存区中的文件提交到版本库。需提供版本说明信息 # 执行这个命令前需要先把要提交的东西使用 git add 命令添加到暂存区 # 然后可以使用 git status 确认一下要提交的内容 git log [--oneline] # 查看版本库的所有 commit 记录。添加 --oneline 参数可以在一行显式git reflog # 查看命令历史，可以看到所有之前使用过的命令记录 默认的 log 命令显示的内容比较长，每次写都带参数的话又比较麻烦，我们可以使用Git的别名功能。将下面的这条命令输入到命令行中： 1git config --global alias.lg &quot;log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit&quot; 之后我们就可以用 git lg 来替代 git log ，可以看到，这样不仅显示的内容更加清晰，还能够显示出 commit 树的分支情况。 远程仓库操作123git clone git@github.com:ChinaNuke/learnGit.git # 克隆远程仓库git remote add origin git@github.com:ChinaNuke/learnGit.git # 添加远程仓库 这两条命令的主要区别是，克隆一般用于GitHub上已经有了在开发的项目，我们需要把整个项目仓库下载到本地的情况（先有远程库，后有本地库）；而添加用于刚创建GitHub仓库，里面并没有东西的情况（先有本地库，后有远程库），但也可以用于第一种情况。 12345678910git push -u origin master # 把本地库的所有内容推送到远程库上，并为 master 分支建立链接 # origin 是远程库的名字，可以改成其他的，但一般用 origin 比较直观 # 一般来说，仅第一次推送时需要建立链接，后续推送不需要git push # 把当前分支的内容推送到远程库对应的分支git pull # 从远程库拉取分支的内容git reset --hard HEAD^ # 回退到上一个版本。HEAD^^ 为上上个版本，以此类推git reset --hard 1094a # 回退/还原到提交编号开头为 1094a 的版本 分支管理留坑。 多人协作项目一般流程使用Git和GitHub可以很方便地进行多人协作。多人协作中所用到的大部分命令已在前面提到，此处不对命令进行详细解释。 对于已经在GitHub上建好的项目，我们要先把它克隆到本地。 1git clone git@github.com:ChinaNuke/learnGit.git [local directory] 其中，参数中的链接是远程仓库的地址，可以在GitHub项目页面找到。 [local directory] 为可选参数，如果指定了目录名，则克隆到这个目录，未指定则默认以仓库名来命名目录，此处为 learnGit 。 之后我们需要 cd learnGit 进入到仓库目录中，后续的操作都在仓库中进行。我们可以使用 git remote -v 命令查看当前仓库本地链接到的远程仓库，一般会看到 fetch 和 push 两个地址，如果没有推送权限，就看不到 push 地址。 然后我们就可以在本地进行开发了，开发过程中我们可以随时使用 git add 命令将工作区中修改过的文件添加到暂存区，然后使用 git commit 命令进行提交，使用 git lg 命令可以查看 commit 树。 在多人开发中，很有可能遇到这样一种情况：我在本地进行开发，其他人也在他的本地基于同一个版本进行开发，然后他在我们之前将修改提交到了远程仓库，这时候我们 push 时就会被拒绝。 1234567To github.com:github.com:ChinaNuke/learnGit.git ! [rejected] dev -&gt; dev (non-fast-forward)error: failed to push some refs to 'git@github.com:ChinaNuke/learnGit.git'hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: 'git pull ...') before pushing again.hint: See the 'Note about fast-forwards' in 'git push --help' for details. 原因显而易见，那如何解决呢？我们先用 git pull 命令把最新的提交从远程库拉取下来，在本地合并，这时可能会有冲突，需要我们手动进行合并（冲突合并方法见廖雪峰教程）。合并完冲突之后就可以再次进行推送了，但是在这之前我们先使用 git lg 命令看看现在的 commit 树，它是不直的，类似这个样子： 123456789101112131415161718* d1be385 (HEAD -&gt; master, origin/master) init hello* e5e69f1 Merge branch 'dev'|\\ | * 57c53ab (origin/dev, dev) fix env conflict| |\\ | | * 7a5e5dd add env| * | 7bd91f1 add new env| |/ * | 12a631b merged bug fix 101|\\ \\ | * | 4c805e2 fix bug 101|/ / * | e1e9c68 merge with no-ff|\\ \\ | |/ | * f52c633 add merge|/ * cf810e4 conflict fixed 这样很不好看，对强迫症很不友好。我们可以在推送前再加一步 git rebase ，正常情况下Git会自动将 commit 树整理成直的，执行完之后我们可以再次使用 git lg 看一下。最后，我们就可以用 git push 推送提交了。 关于 commit 树要整理成直的还是保留原始的修改记录，网上众说纷纭，我更倾向于整理成直的，清晰又直观！ 建议参考资料 Git Cheat Sheet: https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet 廖雪峰Git教程: https://www.liaoxuefeng.com/wiki/896043488029600","link":"/2020/09/how-to-use-git/"},{"title":"Markdown 基本语法","text":"Markdown是一种轻量级的标记语言，对图片、图标和数学公式都有很好的支持，而且其语法极为简单，可以让我们更好的专注于写作内容。本文记录Markdown的各类基本语法和显示效果，以方便后续写作时查阅。 标题123# 一级标题## 二级标题### 三级标题 效果： 一级标题二级标题三级标题段落和换行用一行的空行来隔开段落，Markdown Guide不建议使用空格或者TAB对段落缩进。 123这是第一段这是第二段 效果：这是第一段 这是第二段 在行末添加两个及以上的空格或者加入&lt;br&gt;标签可以单纯的进行换行效果和上面一样。 12这是第一行&lt;br&gt;这是第二行 效果：这是第一行这是第二行 加粗和斜体123**加粗字体***斜体字体****加粗和斜体*** 效果：加粗字体斜体字体加粗和斜体 引用1&gt; 这里是引用 效果： 这里是引用 123&gt; 这里是多段引用&gt;&gt; 这是引用的第二段 效果： 这里是多段引用 这是引用的第二段 123&gt; 这里是套娃引用&gt;&gt;&gt; 这是娃 效果： 这里是套娃引用 这是娃 引用中也可以再嵌套其他的格式。 有序和无序列表12341. 有序列表第一项2. 有序列表第二项3. 有序列表第三项4. 不必保持标号顺序但是第一项必须为1 效果： 有序列表第一项 有序列表第二项 有序列表第三项 不必保持标号顺序但是第一项必须为1 123- 无序列表第一项- 无序列表第二项- 无序列表第三项 效果： 无序列表第一项 无序列表第二项 无序列表第三项 在列表中添加元素同时保持列表连续，可以在插入的元素前面添加四个空格或者一个TAB缩进。 1234- 无序列表第一项- 无序列表第二项 列表之间插入文本，保持列表连续- 无序列表第三项 效果： 无序列表第一项 无序列表第二项 列表之间插入文本，保持列表连续 无序列表第三项 图片1![图片替换文本](图片地址) 链接1[小米10点击就送（假的）](https://nuke666.cn) 效果：小米10点击就送（假的） 代码块1234​``` python hello/hello.pydef my_print(): print('Hello World!')``` 效果：​``` python hello/hello.pydef my_print(): print(‘Hello World!’) ``` 以上便是Markdown常用的基本语法，其他不常用的语法并没有列出，以后有时间再开一篇记录扩展语法。 参考：Markdown Guide: Basic Syntax","link":"/2020/07/markdown-syntax/"}],"tags":[{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"}],"categories":[{"name":"网站","slug":"网站","link":"/categories/%E7%BD%91%E7%AB%99/"}]}